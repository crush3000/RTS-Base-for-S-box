@using Sandbox;
@using Sandbox.UI;
@using System.Linq;
@using System;
@inherits PanelComponent
@attribute [StyleSheet]

@code
{
	public const string ATTACK_STANCE_IMAGE = "materials/attack_stance.png";
	public const string DEFEND_STANCE_IMAGE = "materials/defend_stance.png";
	public const string BUTTON_DISABLED_STYLE = "flex";
	public const string BUTTON_ENABLED_STYLE = "none";
	public const string BUTTON_EVENTS_ENABLED_STYLE = "all";
	public const string BUTTON_EVENTS_DISABLED_STYLE = "none";

	public bool showPanel = true;

	private DynamicToggleButton unitStanceButton;

	private string focusedUnitPortraitImage;
	private string focusedUnitHealth;
	private string focusedUnitName;
	private string focusedUnitTeam;
	private string focusedUnitMeleeDamage;
	private string focusedUnitRangedDamage;

	//private string displayButton

	public List<DynamicButton> currentButtonList { get; set; }

	/* public void setButtons(List<DynamicButton> newbuttonList)
		* {
		* }
		*/
	protected override void OnStart()
	{
		base.OnStart();
		unitStanceButton = new DynamicToggleButton('z', ATTACK_STANCE_IMAGE, DEFEND_STANCE_IMAGE, stanceButtonClicked);
		currentButtonList = new List<DynamicButton>();
		focusedUnitPortraitImage = "";
		focusedUnitHealth = "";
		focusedUnitName = "";
		focusedUnitTeam = "";
		focusedUnitMeleeDamage = "";
		focusedUnitRangedDamage = "";
		//TEST CODE
		currentButtonList.Add(unitStanceButton);
		for(int i=0;i<14;i++)
		{
			currentButtonList.Add(new DynamicButton('a', DEFEND_STANCE_IMAGE,printy ));
		}
		//for (int i = 0; i < 4; i++)
		//{
		//	currentButtonList.ElementAt(i * 2).setEnabled(true);
		//}
		//END TEST CODE
	}

	//BS TEST FUNCTION
	public void printy()
	{
		Log.Info("Button Clicked!");
	}

	private string getFocusedUnitPortraitImage()
	{
		if (focusedUnitPortraitImage == "")
		{
			return DEFEND_STANCE_IMAGE;
		}
		else
		{
			return focusedUnitPortraitImage;
		}
	}

	public void setSelectionVars(bool isSingleUnitSelected, bool isUnitInAttackStance)
	{
		if(isSingleUnitSelected)
		{
			// Grab stats
			var selectedObjList = RTSGame.Instance.ThisPlayer.UnitControl.SelectedObjects;
			foreach (SkinnedRTSObject obj in selectedObjList)
			{
				focusedUnitPortraitImage = obj.PortraitImage;
				focusedUnitHealth = "Health: " + obj.currentHealthPoints + "/" + obj.MaxHealth;
				focusedUnitName = obj.name;
				focusedUnitTeam = "Team " + obj.team.ToString();
				if(obj.Tags.Contains("unit"))
				{
					focusedUnitMeleeDamage = "Melee Damage: " + ((Unit)obj).MeleeAttackDamage;
					focusedUnitRangedDamage = "Ranged Damage: " + ((Unit)obj).RangedAttackDamage;
				}
				else
				{
					focusedUnitMeleeDamage = "";
					focusedUnitRangedDamage = "";
				}
			}

			// Setup Stance Button
			unitStanceButton.setEnabled(true);
			if (isUnitInAttackStance)
			{
				unitStanceButton.setButtonState(ATTACK_STANCE_IMAGE);
			}
			else
			{
				unitStanceButton.setButtonState(DEFEND_STANCE_IMAGE);
			}
		}
		else
		{
			focusedUnitPortraitImage = "";
			focusedUnitHealth = "";
			focusedUnitName = "";
			focusedUnitTeam = "";
			focusedUnitMeleeDamage = "";
			focusedUnitRangedDamage = "";

			unitStanceButton.setEnabled(false);
		}
		this.StateHasChanged();
		this.Panel.Style.Dirty();
	}

	public void stanceButtonClicked()
	{
		var selectedObjList = RTSGame.Instance.ThisPlayer.UnitControl.SelectedObjects;
		if (unitStanceButton.activeBackgroundImage == ATTACK_STANCE_IMAGE)
		{
			foreach (Unit obj in selectedObjList)
			{
				obj.setIsInAttackMode(false);
			}
		}
		else
		{
			foreach (Unit obj in selectedObjList)
			{
				obj.setIsInAttackMode(true);
			}
		}
		unitStanceButton.toggleButtonState();
		this.StateHasChanged();
		this.Panel.Style.Dirty();
	}

	public void setShowPanel(bool setShow)
	{
		showPanel = setShow;
	}
}
<root>
	<div class="bottomPanel">
		<div class="minimapSubPanel"></div>
		<div class="statusSubPanel">
			<div class="portraitStatusPanel">
				<div style="background-image: url(@(getFocusedUnitPortraitImage()));" class="portraitImage"></div>
				<div class="portraitStatusFocused">@(focusedUnitHealth)</div>
			</div>
			<div class="infoStatusPanel">
				<div class="singleUnitStatusName">@(focusedUnitName)</div>
				<div class="singleUnitStatusTeam">@(focusedUnitTeam)</div>
				<div class="singleUnitStatusMeleeDamage">@(focusedUnitMeleeDamage)</div>
				<div class="singleUnitStatusRangedDamage">@(focusedUnitRangedDamage)</div>
			</div>
		</div>
		<div class="dynamicButtonSubPanel">
			@foreach (var button in currentButtonList)
			{
				<button style="background-image: url(@(button.activeBackgroundImage)); pointer-events: @(button.getPointerEventsStyle());" @onclick="@( () => button.OnClick())" class="dynamicButtonSlot">
					<div style="color: @(button.getIsDisabledStyleHint());" class="buttonHintText">@(button.hotkeyChar)</div>
					<div style="display: @(button.getIsDisabledStyle());" class="buttonDisabledOverlay"></div>
				</button>
			}
		</div>
	</div>
</root>

<!-- -->
